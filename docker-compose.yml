networks:
  private-net:

volumes:
  # Location of the Letsencrypt acme-challenge
  fluentbit_certbot_data:
    driver: local

services:
  # -- Fluent-Bit --
  #
  # Fluent Bit is a super fast, lightweight, and highly scalable logging and metrics processor and forwarder.
  # It is the preferred choice for cloud and containerized environments.
  #
  fluent-bit:
    image: ghcr.io/josh5/fluent-bit-router:latest
    build:
      context: docker
    user: '1000:1000'

    # NETWORK:
    networks:
      - private-net
    ports:
      # Fluent Bit HTTP server (can be used for health checks)
      - target: 2020
        published: ${FLUENTBIT_PUBLISHED_HTTP_SERVER_PORT:-2020}
        protocol: tcp
        mode: host
      # Fluent Bit log ingest ports
      - target: ${FLUENTBIT_HTTP_INPUT_PORT:-24280}
        published: ${FLUENTBIT_HTTP_INPUT_PORT:-24280}
        protocol: tcp
        mode: host
      # Forward input configured with TLS certificates
      - target: ${FLUENTBIT_TLS_FORWARD_INPUT_PORT:-24224}
        published: ${FLUENTBIT_TLS_FORWARD_INPUT_PORT:-24224}
        protocol: tcp
        mode: host
      - target: ${FLUENTBIT_TLS_FORWARD_INPUT_PORT:-24224}
        published: ${FLUENTBIT_TLS_FORWARD_INPUT_PORT:-24224}
        protocol: udp
        mode: host
      # Forward input configured PT only (for local docker logs, etc.)
      - target: ${FLUENTBIT_PT_FORWARD_INPUT_PORT:-24228}
        published: ${FLUENTBIT_PT_FORWARD_INPUT_PORT:-24228}
        protocol: tcp
        mode: host
      - target: ${FLUENTBIT_PT_FORWARD_INPUT_PORT:-24228}
        published: ${FLUENTBIT_PT_FORWARD_INPUT_PORT:-24228}
        protocol: udp
        mode: host

    # ENVIRONMENT:
    environment:
      # Application:
      FLUENT_BIT_LOG_LEVEL: ${FLUENT_BIT_LOG_LEVEL:-info}
      HOST_HOSTNAME: ${HOST_HOSTNAME:-grafana-fluent-bit}
      FLUENT_BIT_TAG_PREFIX: ${FLUENT_BIT_TAG_PREFIX:-flb_glf.}
      FLUENT_STORAGE_PATH: /fluent-bit-data/storage

      # -> Inputs
      # |--> HTTP Input
      ENABLE_HTTP_INPUT: ${ENABLE_FLUENTBIT_HTTP_INPUT:-false}
      HTTP_INPUT_PORT: ${FLUENTBIT_HTTP_INPUT_PORT:-24280}

      # |--> Forward TLS Input
      ENABLE_TLS_FORWARD_INPUT: ${ENABLE_FLUENTBIT_TLS_FORWARD_INPUT:-false}
      TLS_FORWARD_INPUT_PORT: ${FLUENTBIT_TLS_FORWARD_INPUT_PORT:-24224}
      TLS_FORWARD_INPUT_SHARED_KEY: ${FLUENTBIT_TLS_FORWARD_INPUT_SHARED_KEY:-}
      TLS_FORWARD_INPUT_VERIFY: ${FLUENTBIT_TLS_FORWARD_INPUT_VERIFY:-off}

      # Certificates
      CERTIFICATES_DIRECTORY: /fluent-bit-data/certs
      USE_EXISTING_CERT: ${FLUENTBIT_USE_EXISTING_CERT:-false}
      EXISTING_CERT_PATH: ${FLUENTBIT_EXISTING_CERT_PATH:-}
      EXISTING_KEY_PATH: ${FLUENTBIT_EXISTING_KEY_PATH:-}
      USE_CERTBOT_TO_GENERATE_KEY: ${USE_CERTBOT_TO_GENERATE_KEY:-false}
      CERT_FQDN: ${CERT_FQDN:-}
      CERT_EMAIL: ${CERT_EMAIL:-}

      # |--> Forward PT Input
      ENABLE_PT_FORWARD_INPUT: ${ENABLE_FLUENTBIT_PT_FORWARD_INPUT:-false}
      PT_FORWARD_INPUT_PORT: ${FLUENTBIT_PT_FORWARD_INPUT_PORT:-24228}

      # -> Outputs
      # |--> STDOUT Output
      ENABLE_STDOUT_OUTPUT: ${ENABLE_FLUENTBIT_STDOUT_OUTPUT:-false}

      # |--> Forward TLS Output
      ENABLE_TLS_FORWARD_OUTPUT: ${ENABLE_FLUENTBIT_TLS_FORWARD_OUTPUT:-false}
      TLS_FORWARD_OUTPUT_HOST: ${FLUENTBIT_TLS_FORWARD_OUTPUT_HOST:-}
      TLS_FORWARD_OUTPUT_PORT: ${FLUENTBIT_TLS_FORWARD_OUTPUT_PORT:-}
      TLS_FORWARD_OUTPUT_SHARED_KEY: ${FLUENTBIT_TLS_FORWARD_OUTPUT_SHARED_KEY:-}
      TLS_FORWARD_OUTPUT_VERIFY: ${FLUENTBIT_TLS_FORWARD_OUTPUT_VERIFY:-off}

      # |--> Forward PT Output
      ENABLE_PT_FORWARD_OUTPUT: ${ENABLE_FLUENTBIT_PT_FORWARD_OUTPUT:-false}
      PT_FORWARD_OUTPUT_HOST: ${FLUENTBIT_PT_FORWARD_OUTPUT_HOST:-}
      PT_FORWARD_OUTPUT_PORT: ${FLUENTBIT_PT_FORWARD_OUTPUT_PORT:-}

      # |--> Grafana Loki Output
      ENABLE_GRAFANA_LOKI_OUTPUT: ${ENABLE_FLUENTBIT_GRAFANA_LOKI_OUTPUT:-false}
      GRAFANA_LOKI_HOST: ${GRAFANA_LOKI_HOST:-loki-gateway}
      GRAFANA_LOKI_PORT: ${GRAFANA_LOKI_PORT:-3100}
      GRAFANA_LOKI_URI: ${TRAEFIK_PATH_PREFIX_LOKI:-}/loki/api/v1/push

      # |--> Graylog GELF Output (MISSING BEFORE)
      ENABLE_GRAYLOG_GELF_OUTPUT: ${ENABLE_GRAYLOG_GELF_OUTPUT:-false}
      # Optional future env (entrypoint currently hardcodes host/port)
      GRAYLOG_GELF_HOST: ${GRAYLOG_GELF_HOST:-graylog}
      GRAYLOG_GELF_PORT: ${GRAYLOG_GELF_PORT:-12201}
      GRAYLOG_GELF_MODE: ${GRAYLOG_GELF_MODE:-tcp}

      # |--> S3 Cold Storage (MISSING BEFORE)
      ENABLE_S3_BUCKET_COLD_STORAGE_OUTPUT: ${ENABLE_S3_BUCKET_COLD_STORAGE_OUTPUT:-false}
      AWS_COLD_STORAGE_BUCKET_NAME: ${AWS_COLD_STORAGE_BUCKET_NAME:-}
      AWS_COLD_STORAGE_BUCKET_REGION: ${AWS_COLD_STORAGE_BUCKET_REGION:-}

    # VOLUMES:
    volumes:
      - type: bind
        source: ${FLUENTBIT_STORAGE_PATH:?}
        target: /fluent-bit-data/storage
      - type: bind
        source: ${FLUENTBIT_CERTS_PATH:?}
        target: /fluent-bit-data/certs
      - type: volume
        source: fluentbit_certbot_data
        target: /var/www/certbot
