#######################################################################
# FLUENT-BIT ROUTER — .env.example
#
# Copy to ".env" and adjust as needed.
# Booleans accept: true/false (case-insensitive). Empty means "unset".
#######################################################################

#######################################################################
# Container Paths (host bind mounts)
#######################################################################
# Path on the HOST for Fluent Bit persistent storage (chunks, etc)
FLUENTBIT_STORAGE_PATH=./appdata/fluent-bit/storage
# Path on the HOST for TLS certs (used by TLS Forward input and outputs)
FLUENTBIT_CERTS_PATH=./appdata/fluent-bit/certs

#######################################################################
# Process & Tagging
#######################################################################
# Fluent Bit log level: error | warn | info | debug | trace
FLUENT_BIT_LOG_LEVEL=info
# Tag prefix to route/filter records (entrypoint matches "<prefix>**")
FLUENT_BIT_TAG_PREFIX=flb.
# Hostname used inside Fluent Bit (self_hostname / cert CN where relevant)
HOST_HOSTNAME=fluent-bit-router

#######################################################################
# HTTP Server (Fluent Bit built-in, for health/metrics)
#######################################################################
# Published host port for the FB HTTP server (container target 2020)
FLUENTBIT_PUBLISHED_HTTP_SERVER_PORT=2020

#######################################################################
# Inputs
#######################################################################

# --- HTTP Input (ingest HTTP logs) ---
# Enable the HTTP input listener
ENABLE_FLUENTBIT_HTTP_INPUT=false
# Listener port (container) for HTTP input (published 1:1)
FLUENTBIT_HTTP_INPUT_PORT=34280

# --- Forward (TLS) Input (secure Forward protocol) ---
# Enable Forward input with TLS
ENABLE_FLUENTBIT_TLS_FORWARD_INPUT=false
# Listener port (container) for TLS Forward input (published 1:1 TCP+UDP)
FLUENTBIT_TLS_FORWARD_INPUT_PORT=24224
# Shared key required for TLS Forward input (optional but recommended)
FLUENTBIT_TLS_FORWARD_INPUT_SHARED_KEY=
# Verify upstream client certs? on|off
FLUENTBIT_TLS_FORWARD_INPUT_VERIFY=off

# --- Forward (Plaintext) Input (PT) ---
# Enable plaintext Forward input (good for local/dev/docker logs)
ENABLE_FLUENTBIT_PT_FORWARD_INPUT=true
# Listener port (container) for PT Forward input (published 1:1 TCP+UDP)
FLUENTBIT_PT_FORWARD_INPUT_PORT=34228

#######################################################################
# TLS Certificates (for TLS Forward input or TLS outputs)
#######################################################################
# Directory INSIDE CONTAINER where cert(s) will live (don’t change)
# (compose maps this to /fluent-bit-data/certs)
# Note: entrypoint concatenates key+cert to "fluent-bit.pem" in this dir.
# CERTIFICATES_DIRECTORY is mapped in compose; no need to set here.

# Use an existing key/cert pair? (true/false)
FLUENTBIT_USE_EXISTING_CERT=false
# Paths INSIDE CONTAINER to existing key/cert files (only used when above=true)
FLUENTBIT_EXISTING_KEY_PATH=/fluent-bit-data/certs/1.key
FLUENTBIT_EXISTING_CERT_PATH=/fluent-bit-data/certs/1.pem

# Use Certbot to generate a real certificate via HTTP-01 challenge? (true/false)
# Requires a reverse-proxy writing the sentinel file /var/www/certbot/.proxy-running
USE_CERTBOT_TO_GENERATE_KEY=false
# FQDN to issue cert for when using certbot, and used as CN for self-signed cert
CERT_FQDN=fluent-bit-router.example.com
# Email for certbot registration
CERT_EMAIL=admin@example.com

#######################################################################
# Outputs
#######################################################################

# --- STDOUT Output (debug all logs) ---
# Dumps ALL logs to stdout (for debugging); recommended=false in prod
ENABLE_FLUENTBIT_STDOUT_OUTPUT=false

# --- Forward (TLS) Output ---
# Forward to another Fluent Bit/Fluentd via TLS
ENABLE_FLUENTBIT_TLS_FORWARD_OUTPUT=false
FLUENTBIT_TLS_FORWARD_OUTPUT_HOST=
FLUENTBIT_TLS_FORWARD_OUTPUT_PORT=
FLUENTBIT_TLS_FORWARD_OUTPUT_SHARED_KEY=
# Verify upstream server cert? on|off
FLUENTBIT_TLS_FORWARD_OUTPUT_VERIFY=off

# --- Forward (Plaintext) Output ---
# Forward to another Fluent Bit/Fluentd (no TLS)
ENABLE_FLUENTBIT_PT_FORWARD_OUTPUT=false
FLUENTBIT_PT_FORWARD_OUTPUT_HOST=
FLUENTBIT_PT_FORWARD_OUTPUT_PORT=

# --- Grafana Loki Output ---
# Enable Loki
ENABLE_FLUENTBIT_GRAFANA_LOKI_OUTPUT=false
# Loki target
GRAFANA_LOKI_HOST=loki-gateway
GRAFANA_LOKI_PORT=3100
# Loki push URI (prefix can be set via TRAEFIK_PATH_PREFIX_LOKI, or leave blank)
TRAEFIK_PATH_PREFIX_LOKI=
# Final URI used by entrypoint: ${TRAEFIK_PATH_PREFIX_LOKI}/loki/api/v1/push
# (If TRAEFIK_PATH_PREFIX_LOKI is empty, defaults to /loki/api/v1/push)

# --- Graylog GELF Output (optional) ---
# Entry point supports GELF output when enabled, host/port are currently
# hardcoded (host=graylog, port=12201 TCP). You can either name/bridge the
# Graylog service as "graylog", or patch entrypoint to use env overrides.
ENABLE_GRAYLOG_GELF_OUTPUT=false
# (Optional future-proofing if you patch entrypoint.sh to read these)
GRAYLOG_GELF_HOST=graylog
GRAYLOG_GELF_PORT=12201
GRAYLOG_GELF_MODE=tcp

# --- S3 Cold Storage (optional) ---
# Archive logs to S3; requires AWS creds via your runtime (env/role)
ENABLE_S3_BUCKET_COLD_STORAGE_OUTPUT=false
AWS_COLD_STORAGE_BUCKET_NAME=
AWS_COLD_STORAGE_BUCKET_REGION=
